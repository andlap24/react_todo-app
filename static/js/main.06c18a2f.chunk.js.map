{"version":3,"sources":["components/UserInfo/index.js","api/api.js","components/UsersList/UsersList.jsx","context.js","App.js","reportWebVitals.js","index.js"],"names":["getData","url","a","fetch","then","response","ok","Error","status","statusText","json","result","results","getUsers","users","getInfo","userId","userInfo","UsersList","className","map","user","name","Context","React","createContext","App","useState","setUsers","setUserUnfo","useEffect","starWarsUsers","getUserInfo","id","starWarsUserInfo","Provider","value","UserInfo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IAAA,iF,iLCEaA,G,MAAO,uCAAG,WAAMC,GAAN,SAAAC,EAAA,+EAAaC,MAAM,GAAD,OAFxB,yBAEwB,OAAeF,IACrDG,MAAK,SAACC,GACL,IAAKA,EAASC,GACZ,MAAM,IAAIC,MAAJ,UAAaF,EAASG,OAAtB,cAAkCH,EAASI,aAGnD,OAAOJ,EAASK,UAEjBN,MAAK,SAAAO,GAAM,OAAIA,EAAOC,YARF,2CAAH,uDAUPC,EAAQ,uCAAG,WAAMZ,GAAN,eAAAC,EAAA,sEACFF,EAAQC,GADN,cAChBa,EADgB,yBAGfA,GAHe,2CAAH,sDAMRC,EAAO,uCAAG,WAAMC,GAAN,eAAAd,EAAA,sEACEF,EAAQ,WAAD,OAAYgB,IADrB,cACfC,EADe,yBAGdA,GAHc,2CAAH,sDCdPC,G,MAAY,SAAC,GAAD,IAAGJ,EAAH,EAAGA,MAAH,OACvB,qCACE,oBAAIK,UAAU,sBAAd,SACGL,EAAMM,KAAI,SAAAC,GAAI,OACb,oBAEEF,UAAU,kBAFZ,SAIGE,EAAKC,MAHDD,EAAKC,WAQhB,8BACE,6BACE,oD,OCjBKC,EAAUC,IAAMC,gBC0CdC,EAnCH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTb,EADS,KACFc,EADE,OAEgBD,mBAAS,IAFzB,mBAETV,EAFS,KAECY,EAFD,KAIhBC,oBAAS,sBAAC,4BAAA5B,EAAA,sEACoBW,EAAS,WAD7B,OACFkB,EADE,OAGRH,EAASG,GAHD,2CAIP,IAEH,IAAMC,EAAW,uCAAG,WAAMC,GAAN,eAAA/B,EAAA,sEACaa,EAAQkB,GADrB,OACZC,EADY,OAGlBL,EAAYK,GAHM,2CAAH,sDAMjB,OACE,cAACX,EAAQY,SAAT,CAAkBC,MAAOtB,EAAzB,SACE,qBAAKK,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAIA,UAAU,aAAd,iBAEE,2CAEF,cAAC,EAAD,CACEL,MAAOA,EACPkB,YAAaA,IAEf,cAACK,EAAA,SAAD,CAAUpB,SAAUA,YCzBfqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.06c18a2f.chunk.js","sourcesContent":["export * from './UserInfo';\n","const BASE_URL = 'https://swapi.dev/api';\n\nexport const getData = async url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.results);\n\nexport const getUsers = async(url) => {\n  const users = await getData(url);\n\n  return users;\n};\n\nexport const getInfo = async(userId) => {\n  const userInfo = await getData(`/people/${userId}`);\n\n  return userInfo;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './UsersList.css';\n\nexport const UsersList = ({ users }) => (\n  <>\n    <ul className=\"App__todo-list list\">\n      {users.map(user => (\n        <li\n          key={user.name}\n          className=\"list__item item\"\n        >\n          {user.name}\n        </li>\n      ))}\n    </ul>\n\n    <div>\n      <ul>\n        <li>\n          Some info\n        </li>\n      </ul>\n    </div>\n  </>\n);\n\nUsersList.propTypes = {\n  users: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React from 'react';\n\nexport const Context = React.createContext();\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport { getUsers, getInfo } from './api/api';\n\nimport { UsersList } from './components/UsersList';\nimport { UserInfo } from './components/UserInfo';\nimport { Context } from './context';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [userInfo, setUserUnfo] = useState([]);\n\n  useEffect(async() => {\n    const starWarsUsers = await getUsers('/people');\n\n    setUsers(starWarsUsers);\n  }, []);\n\n  const getUserInfo = async(id) => {\n    const starWarsUserInfo = await getInfo(id);\n\n    setUserUnfo(starWarsUserInfo);\n  };\n\n  return (\n    <Context.Provider value={users}>\n      <div className=\"App\">\n        <div className=\"App__body\">\n          <h1 className=\"App__title\">\n            Star\n            <span>Wars</span>\n          </h1>\n          <UsersList\n            users={users}\n            getUserInfo={getUserInfo}\n          />\n          <UserInfo userInfo={userInfo} />\n        </div>\n      </div>\n    </Context.Provider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}