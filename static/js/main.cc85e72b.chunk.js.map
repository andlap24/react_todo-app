{"version":3,"sources":["api/api.js","components/Loader/Loader.jsx","components/UsersList/UsersList.jsx","components/UserInfo/UserInfo.jsx","context.js","App.js","reportWebVitals.js","index.js"],"names":["getData","url","a","fetch","then","response","ok","Error","status","statusText","json","result","results","getUsers","users","getInfo","Loader","className","xmlns","viewBox","cx","cy","r","stroke","UsersList","getUserInfo","changeSelectUser","displayUserInfo","selectUser","map","user","name","created","type","onClick","UserInfo","userInfo","height","mass","hair_color","Context","React","createContext","App","useState","setUsers","setUserInfo","setDisplayUserInfo","setSelectUser","useEffect","starWarsUsers","starWarsUserInfo","togglerUserInfo","Provider","value","userName","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cc85e72b.chunk.js","sourcesContent":["const BASE_URL = 'https://swapi.dev/api';\n\nexport const getData = async url => fetch(`${BASE_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.results);\n\nexport const getUsers = async(url) => {\n  const users = await getData(url);\n\n  return users;\n};\n\nexport const getInfo = async url => fetch(url)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result);\n","import React from 'react';\nimport './Loader.css';\n\nexport const Loader = () => (\n  <div className=\"wrapper\">\n    <svg\n      className=\"loader\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 340 340\"\n    >\n      <circle cx=\"170\" cy=\"170\" r=\"160\" stroke=\"#E2007C\" />\n      <circle cx=\"170\" cy=\"170\" r=\"135\" stroke=\"#404041\" />\n      <circle cx=\"170\" cy=\"170\" r=\"110\" stroke=\"#E2007C\" />\n      <circle cx=\"170\" cy=\"170\" r=\"85\" stroke=\"#404041\" />\n    </svg>\n  </div>\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './UsersList.css';\n\n// eslint-disable-next-line\nexport const UsersList = ({ users, getUserInfo, displayUserInfo, changeSelectUser, selectUser }) => (\n  <>\n    <ul className=\"App__todo-list list\">\n      {users.map(user => (\n        <div className=\"list__item item\">\n          <li\n            key={user.created}\n          >\n            {user.name}\n          </li>\n          <button\n            type=\"button\"\n            className=\"item__btn\"\n            onClick={() => {\n              getUserInfo(user.url);\n              changeSelectUser(user.name);\n            }}\n          >\n            {selectUser !== user.name\n              ? 'about'\n              : 'close'\n            }\n          </button>\n        </div>\n      ))}\n    </ul>\n  </>\n);\n\nUsersList.propTypes = {\n  users: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n  getUserInfo: PropTypes.func.isRequired,\n  displayUserInfo: PropTypes.bool.isRequired,\n  changeSelectUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './UserInfo.css';\n\nexport const UserInfo = ({ userInfo }) => (\n  <div className=\"App__user user\">\n    <ul className=\"user__info info\">\n      <li className=\"\">\n        {`Height: ${userInfo.height}`}\n      </li>\n      <li>\n        {`Mass: ${userInfo.mass}`}\n      </li>\n      <li>\n        {`Hair color: ${userInfo.hair_color}`}\n      </li>\n    </ul>\n  </div>\n);\n\nUserInfo.propTypes = {\n  userInfo: PropTypes.shape({\n    height: PropTypes.string.isRequired,\n    mass: PropTypes.string.isRequired,\n    hair_color: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\n\nexport const Context = React.createContext();\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nimport { getUsers, getInfo } from './api/api';\n\nimport { Loader } from './components/Loader';\nimport { UsersList } from './components/UsersList';\nimport { UserInfo } from './components/UserInfo';\nimport { Context } from './context';\n\nconst App = () => {\n  const [users, setUsers] = useState([]);\n  const [userInfo, setUserInfo] = useState([]);\n  const [displayUserInfo, setDisplayUserInfo] = useState([false]);\n  const [selectUser, setSelectUser] = useState([]);\n\n  useEffect(async() => {\n    const starWarsUsers = await getUsers('/people');\n\n    setUsers(starWarsUsers);\n  }, []);\n\n  const getUserInfo = async(url) => {\n    const starWarsUserInfo = await getInfo(url);\n\n    setUserInfo(starWarsUserInfo);\n    togglerUserInfo();\n  };\n\n  const togglerUserInfo = () => {\n    setDisplayUserInfo(!displayUserInfo);\n  };\n\n  const changeSelectUser = (userName) => {\n    setSelectUser(userName);\n  };\n\n  return (\n    <Context.Provider value={users}>\n      <div className=\"App\">\n        <div className=\"App__body\">\n          <h1 className=\"App__title\">\n            to\n            <span>do</span>\n          </h1>\n          <UsersList\n            users={users}\n            displayUserInfo={displayUserInfo}\n            selectUser={selectUser}\n            getUserInfo={getUserInfo}\n            changeSelectUser={changeSelectUser}\n          />\n          {displayUserInfo\n            ? <Loader />\n            : (\n              <UserInfo\n                userInfo={userInfo}\n                displayUserInfo={displayUserInfo}\n              />\n            )\n          }\n        </div>\n      </div>\n    </Context.Provider>\n  );\n};\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}